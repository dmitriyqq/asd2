{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","setup","p5","canvasParentRef","createCanvas","size","parent","pixelDensity","startGeneratingMap","state","numOfPoints","colors","countries","mappixels","Array","fill","map","i","nextpixels","x","round","random","y","push","index","neighbors","Set","currentGeneration","selectedCountry","topscore","setState","draw","mapRunning","evoRunning","canRunEvo","generateMapStep","Error","j","pixel","Map","n","has","set","get","max","maxnum","forEach","value","key","Math","abs","sparseLog","calcNeigbours","makeFirstGeneration","pixels","undefined","counter","getCountryOpacity","country","mouseMoved","mouseX","mouseY","newCountry","makeSecondGeneration","background","loadPixels","pix","color","dna","scolors","border","updatePixels","stroke","calcFitness","score","length","neighbor","mutate","mutationFactor","copy","numOfSamples","_","fitness","sort","a","b","resetGeneticAlgorithm","floor","t","min","p","createTableCells","row","cells","createTableRows","el","handleNumberOfCountriesChange","e","persist","Number","target","strNumOfPoints","handlePopulationSizeChange","strNumOfSamples","handleMutationChanceChange","strMutationFactor","this","currentCountry","add","Fragment","type","name","onChange","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ced43540.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.size = 500;\r\n    this.numOfPoints = 100;\r\n    this.numOfSamples = 500;\r\n    this.mappixels = new Array(this.size).fill().map(i => new Array(this.size).fill(0));\r\n    this.nextpixels = new Array(this.size).fill().map(i => new Array(this.size).fill(0));\r\n    this.selectedCountry = null;\r\n    this.countries = [];\r\n    this.currentGeneration = [];\r\n    this.colors = [];\r\n    this.scolors = [\r\n      [255, 0, 255],\r\n      [255, 0, 0],\r\n      [0, 255, 0],\r\n      [0, 0, 255],\r\n    ];\r\n\r\n    this.state = {\r\n      draw: \"1\",\r\n      evoRunning: false,\r\n      mapRunning: true,\r\n      size: 500,\r\n      numOfPoints: 50,\r\n      strNumOfPoints: \"50\",\r\n      numOfSamples: 5000,\r\n      strNumOfSamples: \"5000\",\r\n      mutationFactor: 10,\r\n      strMutationFactor: \"10\",\r\n      currentGeneration: 0,\r\n      topscore: 0,\r\n      canRunEvo: false,\r\n    }\r\n  }\r\n\r\n  setup = (p5, canvasParentRef) => {\r\n    this.p5 = p5;\r\n    p5.createCanvas(this.size, this.size).parent(canvasParentRef);\r\n    p5.pixelDensity(1);\r\n\r\n    this.startGeneratingMap();\r\n  };\r\n\r\n  startGeneratingMap = () => {\r\n    const { size, numOfPoints } = this.state;\r\n    this.colors = [];\r\n    this.countries = [];\r\n\r\n    // algo to generate map uses nextpixels to generate second step, then swaps it to the mappixels -\r\n    // the actual map coloring in countries indices\r\n\r\n    this.mappixels = new Array(size).fill().map(i => new Array(size).fill(0));\r\n    this.nextpixels = new Array(size).fill().map(i => new Array(size).fill(0));\r\n\r\n    // let's generate dozen of points\r\n    for (let i = 0; i < numOfPoints; i++) {\r\n      const x = this.p5.round(this.p5.random(1, size - 1));\r\n      const y = this.p5.round(this.p5.random(1, size - 1));\r\n\r\n      // raster representation\r\n      this.mappixels[x][y] = i;\r\n\r\n      this.countries.push({ index: i, neighbors: new Set() })\r\n\r\n      // create random rgb color\r\n      this.colors.push([\r\n        this.p5.round(this.p5.random(0, 254)),\r\n        this.p5.round(this.p5.random(0, 254)),\r\n        this.p5.round(this.p5.random(0, 254))\r\n      ])\r\n    }\r\n\r\n    this.currentGeneration = [];\r\n    this.selectedCountry = null;\r\n    this.topscore = 0;\r\n\r\n    this.setState(() => ({\r\n      currentGeneration: 0,\r\n      draw: \"1\",\r\n      mapRunning: true,\r\n      evoRunning: false,\r\n      canRunEvo: false,\r\n    }))\r\n  }\r\n\r\n  generateMapStep = () => {\r\n    const { size, evoRunning } = this.state;\r\n    if (evoRunning) {\r\n      throw new Error('couldnt generate map during evo phase');\r\n    }\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      for (let j = 0; j < size; j++) {\r\n\r\n        let pixel = this.mappixels[i][j];\r\n        const neighbors = []\r\n\r\n        if (i > 0) {\r\n          neighbors.push(this.mappixels[i - 1][j])\r\n        }\r\n        if (i < this.size - 1) {\r\n          neighbors.push(this.mappixels[i + 1][j])\r\n        }\r\n        if (j > 0) {\r\n          neighbors.push(this.mappixels[i][j - 1])\r\n        }\r\n        if (j < this.size - 1) {\r\n          neighbors.push(this.mappixels[i][j + 1])\r\n        }\r\n        if (i > 0 && j > 0) {\r\n          neighbors.push(this.mappixels[i - 1][j - 1])\r\n        }\r\n        if (i > 0 && j < this.size - 1) {\r\n          neighbors.push(this.mappixels[i - 1][j + 1])\r\n        }\r\n        if (i < this.size - 1 && j > 0) {\r\n          neighbors.push(this.mappixels[i + 1][j - 1])\r\n        }\r\n        if (i < this.size - 1 && j < this.size - 1) {\r\n          neighbors.push(this.mappixels[i + 1][j + 1])\r\n        }\r\n\r\n        const map = new Map()\r\n        for (const n of neighbors) {\r\n          if (map.has(n)) {\r\n            map.set(n, map.get(n) + 1);\r\n          } else {\r\n            map.set(n, 1);\r\n          }\r\n        }\r\n\r\n        let max = 0, maxnum = 0;\r\n        map.forEach((value, key) => {\r\n          if (max < value && key !== 0) {\r\n            max = value;\r\n            maxnum = key;\r\n          }\r\n        });\r\n\r\n        if (pixel === 0 && Math.abs(Math.random()) < 0.4) {\r\n          pixel = maxnum;\r\n        }\r\n\r\n        this.nextpixels[i][j] = pixel;\r\n      }\r\n    }\r\n\r\n    [this.nextpixels, this.mappixels] = [this.mappixels, this.nextpixels]\r\n\r\n    if (this.sparseLog() === this.size * this.size) {\r\n      this.setState(() => ({ mapRunning: false, canRunEvo: true }));\r\n      this.calcNeigbours();\r\n      this.makeFirstGeneration();\r\n    }\r\n  }\r\n\r\n  // get count of empty pixels left\r\n  sparseLog = (pixels) => {\r\n    if (pixels === undefined) {\r\n      pixels = this.mappixels;\r\n    }\r\n\r\n    const map = new Map();\r\n    let counter = 0;\r\n    for (let x = 0; x < this.size; x++) {\r\n      for (let y = 0; y < this.size; y++) {\r\n        const n = pixels[x][y]\r\n        if (n !== 0) {\r\n          counter++;\r\n        }\r\n\r\n        if (!map.has(n)) {\r\n          map.set(n, 1)\r\n        } else {\r\n          map.set(n, map.get(n) + 1)\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  // to highlight neighbors\r\n  getCountryOpacity = (country) => {\r\n    if (!this.selectedCountry) {\r\n      return 255;\r\n    }\r\n\r\n    if (this.selectedCountry === country) {\r\n      return 255;\r\n    } else if (this.countries[this.selectedCountry].neighbors.has(country)) {\r\n      return 150;\r\n    } else {\r\n      return 50;\r\n    }\r\n  }\r\n\r\n  mouseMoved = p5 => {\r\n    let { mouseX, mouseY } = p5;\r\n    mouseX = p5.round(mouseX);\r\n    mouseY = p5.round(mouseY);\r\n\r\n    if (mouseX >= 0 && mouseX < this.size && mouseY >= 0 && mouseY < this.size) {\r\n      const newCountry = this.mappixels[mouseX][mouseY];\r\n      if (this.selectedCountry !== newCountry && newCountry !== 0) {\r\n        this.selectedCountry = newCountry;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  calcNeigbours() {\r\n    for (let i = 0; i < this.size; i++) {\r\n      for (let j = 0; j < this.size; j++) {\r\n        const currentCountry = this.mappixels[i][j];\r\n        const { neighbors } = this.countries[currentCountry];\r\n        if (i > 0 && this.mappixels[i - 1][j] !== currentCountry) {\r\n          neighbors.add(this.mappixels[i - 1][j])\r\n        }\r\n        if (i < this.size - 1 && this.mappixels[i + 1][j] !== currentCountry) {\r\n          neighbors.add(this.mappixels[i + 1][j])\r\n        }\r\n        if (j > 0 && this.mappixels[i][j - 1] !== currentCountry) {\r\n          neighbors.add(this.mappixels[i][j - 1])\r\n        }\r\n        if (j < this.size - 1 && this.mappixels !== currentCountry) {\r\n          neighbors.add(this.mappixels[i][j + 1])\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  draw = p5 => {\r\n    const { mapRunning, evoRunning } = this.state;\r\n    if (mapRunning) {\r\n      this.generateMapStep();\r\n    }\r\n\r\n    if (evoRunning) {\r\n      this.makeSecondGeneration();\r\n    }\r\n\r\n    this.p5.background(0);\r\n    this.p5.loadPixels();\r\n    const { size } = this.state\r\n    for (let x = 0; x < size; x++) {\r\n      for (let y = 0; y < size; y++) {\r\n        const pix = (x + y * size) * 4;\r\n        const country = this.mappixels[x][y];\r\n        let color;\r\n        if (this.state.draw === \"1\") {\r\n\r\n          color = this.colors[country];\r\n        } else {\r\n          const dna = this.currentGeneration[0].dna\r\n          color = this.scolors[dna[country]];\r\n        }\r\n\r\n        let border = false;\r\n        if (x > 0 && this.mappixels[x - 1][y] !== country) {\r\n          border = true;\r\n        } else if (y > 0 && this.mappixels[x][y - 1] !== country) {\r\n          border = true;\r\n        } else if (x < size - 1 && this.mappixels[x + 1][y] !== country) {\r\n          border = true;\r\n        } else if (y < size - 1 && this.mappixels[x][y + 1] !== country) {\r\n          border = true;\r\n        }\r\n\r\n        this.p5.pixels[pix] = border ? 0 : color[0];\r\n        this.p5.pixels[pix + 1] = border ? 0 : color[1];\r\n        this.p5.pixels[pix + 2] = border ? 0 : color[2];\r\n\r\n        if (this.state.draw === \"1\") {\r\n          this.p5.pixels[pix + 3] = this.getCountryOpacity(country); // alpha\r\n        } else {\r\n          this.p5.pixels[pix + 3] = 255;\r\n        }\r\n      }\r\n    }\r\n    this.p5.updatePixels();\r\n    this.p5.stroke(255);\r\n  };\r\n\r\n\r\n  calcFitness = (dna) => {\r\n    let score = 0;\r\n\r\n    for (let i = 0; i < this.countries.length; i++) {\r\n      const country = this.countries[i];\r\n      for (const neighbor of country.neighbors) {\r\n        if (dna[neighbor] === dna[country.index] && country.index !== neighbor) {\r\n          score += country.neighbors.size;\r\n        }\r\n      }\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  mutate = (dna) => {\r\n    const { mutationFactor } = this.state;\r\n    const copy = [...dna];\r\n    for (let i = 0; i < this.p5.random(0, this.p5.round(this.numOfPoints / mutationFactor)); i++) {\r\n      copy[this.p5.round(this.p5.random(0, dna.length - 1))] = this.p5.round(this.p5.random(0, 3));\r\n    }\r\n    return copy;\r\n  }\r\n\r\n  makeFirstGeneration = () => {\r\n    this.currentGeneration = new Array(this.numOfSamples).fill()\r\n      .map(_ => {\r\n        const dna = new Array(this.countries.length).fill(0).map(() => this.p5.round(this.p5.random(0, 3)))\r\n        return { dna, fitness: this.calcFitness(dna) }\r\n      });\r\n\r\n    this.currentGeneration.sort((a, b) => a.fitness - b.fitness)\r\n    this.setState(() => ({ currentGeneration: 0 }));\r\n  }\r\n\r\n  resetGeneticAlgorithm = () => {\r\n    this.makeFirstGeneration();\r\n    this.makeSecondGeneration();\r\n  }\r\n\r\n  makeSecondGeneration = () => {\r\n    const { mapRunning } = this.state;\r\n    if (mapRunning) {\r\n      throw new Error('coudnt run evo while map havent finished generating')\r\n    }\r\n\r\n    this.setState(() => ({ evoRunning: true }));\r\n\r\n    const currentGeneration = this.currentGeneration;\r\n\r\n    this.currentGeneration = [];\r\n    // the best goes without changes\r\n    for (let i = 0; i < 20; i++) {\r\n      this.currentGeneration.push(currentGeneration[i])\r\n    }\r\n\r\n    for (let i = 20; i < this.numOfSamples - 100; i++) {\r\n      const dna = this.mutate(currentGeneration[Math.floor(i % 20)].dna)\r\n      this.currentGeneration.push({\r\n        dna, fitness: this.calcFitness(dna)\r\n      })\r\n    }\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      const dna = new Array(this.countries.length).fill(0).map(() => this.p5.round(this.p5.random(0, 3)))\r\n      this.currentGeneration.push({\r\n        dna, fitness: this.calcFitness(dna)\r\n      })\r\n    }\r\n\r\n    let topscore = 10000;\r\n    for (const t of this.currentGeneration) {\r\n      topscore = Math.min(topscore, t.fitness);\r\n    }\r\n\r\n    this.currentGeneration.sort((a, b) => a.fitness - b.fitness)\r\n    if (topscore === 0) {\r\n      this.setState(p => ({ topscore, evoRunning: false, currentGeneration: p.currentGeneration + 1 }));\r\n    } else {\r\n      this.setState(p => ({ topscore, evoRunning: true, currentGeneration: p.currentGeneration + 1 }));\r\n    }\r\n\r\n  }\r\n\r\n  createTableCells = (row) => {\r\n    const cells = [];\r\n    let counter = 0;\r\n\r\n    cells.push(<td key={0}><b>{row.fitness}</b></td>)\r\n    for (const t of row.dna) {\r\n      cells.push(<td key={counter + 1}>{t}</td>)\r\n      counter++;\r\n    }\r\n\r\n    return cells;\r\n  }\r\n\r\n  createTableRows = () => {\r\n    return this.currentGeneration.map((el, i) => (<tr key={i}>{this.createTableCells(el)}</tr>));\r\n  }\r\n\r\n  handleNumberOfCountriesChange = (e) => {\r\n    e.persist();\r\n    this.setState(() => ({ numOfPoints: Number(e.target.value) || 100, strNumOfPoints: e.target.value }))\r\n  }\r\n\r\n  handlePopulationSizeChange = (e) => {\r\n    e.persist();\r\n    this.setState(() => ({ numOfSamples: Number(e.target.value) || 100, strNumOfSamples: e.target.value }))\r\n  }\r\n\r\n  handleMutationChanceChange = (e) => {\r\n    e.persist();\r\n    this.setState(() => ({ mutationFactor: Number(e.target.value) || 10, strMutationFactor: e.target.value }))\r\n  }\r\n\r\n  render() {\r\n    let table = null;\r\n\r\n    // if (this.currentGeneration) {\r\n    //   // \r\n    //   table = (<table>\r\n    //       <tbody>\r\n    //       {this.createTableRows()}\r\n    //       </tbody>\r\n    //     </table>)\r\n    // }\r\n\r\n    const { evoRunning, mapRunning,\r\n      canRunEvo, currentGeneration, strNumOfSamples,\r\n      strNumOfPoints, strMutationFactor, mutationFactor, numOfPoints, numOfSamples } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Раскраска карты</h1>\r\n\r\n        <p>\r\n          <label>Number of countries: </label>\r\n          <input type=\"text\" name=\"size\" value={strNumOfPoints} onChange={this.handleNumberOfCountriesChange} />\r\n        </p>\r\n\r\n        <p>\r\n          <label>Population size: </label>\r\n          <input type=\"text\" name=\"size\" value={strNumOfSamples} onChange={this.handlePopulationSizeChange} />\r\n        </p>\r\n\r\n        <p>\r\n          <label>Mutation factor: </label>\r\n          <input type=\"text\" name=\"size\" value={strMutationFactor} onChange={this.handleMutationChanceChange} />\r\n        </p>\r\n\r\n\r\n        <p>Current gen: {currentGeneration}</p>\r\n        <p>Top score: {this.state.topscore}</p>\r\n        <p>Number of countries: {numOfPoints}</p>\r\n        <p>Population size: {numOfSamples}</p>\r\n        <p>Mutation factor: {mutationFactor}</p>\r\n\r\n        <p>\r\n          <button disabled={mapRunning || evoRunning} onClick={this.startGeneratingMap}>Create new map</button>\r\n          <button disabled={mapRunning || evoRunning || !canRunEvo} onClick={this.resetGeneticAlgorithm}>Run evo</button>\r\n          <button onClick={() => { this.setState(() => ({ evoRunning: false, mapRunning: false })) }}>Stop</button>\r\n          <select disabled={mapRunning || evoRunning} onChange={e => { e.persist(); this.setState(() => ({ draw: e.target.value })) }}>\r\n            <option value=\"1\">Страны</option>\r\n            {!mapRunning ? <option value=\"2\">Раскраска</option> : null}\r\n          </select>\r\n        </p>\r\n\r\n        <Sketch setup={this.setup} draw={this.draw} mouseMoved={this.mouseMoved} />\r\n        {table}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}